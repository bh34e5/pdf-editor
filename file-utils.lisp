(in-package #:com.bhester.file-utils)

(alexandria:define-constant +return-char+ (char-code #\Return))
(alexandria:define-constant +feed-char+ (char-code #\LineFeed))

(alexandria:define-constant +line-endings+ `(,+return-char+ ,+feed-char+)
                            :test #'equalp)

(defun get-file-line-ending (file-handle)
  (file-position file-handle 0)
  (do ((cur-char (read-byte file-handle) (read-byte file-handle)))
      ((member cur-char +line-endings+)
       (cond ((and (eq cur-char +return-char+)
                   (eq (read-byte file-handle) +feed-char+))
              :crlf)
             ((eq cur-char +return-char+) :cr)
             ((eq cur-char +feed-char+) :lf)))
    nil))

(defun read-to-line-ending (file-handle line-ending &key (action nil))
  (do ((cur-char (read-byte file-handle)
                 (or test-char (read-byte file-handle)))
       (test-char nil nil))
      ((or (and (eq line-ending :lf)
                (eq cur-char +feed-char+))
           (and (eq line-ending :crlf)
                (eq cur-char +return-char+)
                (eq (setf test-char (read-byte file-handle)) +feed-char+))
           (and (eq line-ending :cr)
                (eq cur-char +return-char+))))
    (when action
      (funcall action cur-char)))
  (file-position file-handle
                 (- (file-position file-handle)
                    (if (eq line-ending :crlf) 2 1))))
